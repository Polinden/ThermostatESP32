#include <WiFi.h>
#include "ESPAsyncWebServer.h"
#include "SPIFFS.h"
#include "Adafruit_SHT31.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>
#include <ArduinoOTA.h>
#include "GyverTimer.h"

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
#define OLED_MOSI  25
#define OLED_CLK   17
#define OLED_DC    27
#define OLED_CS    16
#define OLED_RESET 14


const unsigned char myBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x03, 0xc0, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x38, 0x00, 0x1c, 0x78, 0x00, 0x18, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x70, 0x0c, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0xc0, 0x02, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x80, 0x80, 0x01, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x61, 0x00, 0x00, 0x86, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x23, 0x00, 0x00, 0xc4, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x2c, 0x00, 0x00, 0x34, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xc0, 0x1c, 0x2c, 0x00, 0x00, 0x34, 0x38, 0x07, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x3c, 0x00, 0x00, 0x28, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xfb, 0x14, 0x00, 0x00, 0x28, 0xdf, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x94, 0x00, 0x00, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6c, 0x00, 0x00, 0x76, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbe, 0x00, 0x00, 0x7d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x01, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x80, 0x01, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x06, 0xc7, 0xe2, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xff, 0xb8, 0x1d, 0x9f, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x1f, 0xf0, 0x07, 0xf8, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x61, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0x86, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xc7, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xc3, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x06, 0x80, 0x01, 0x60, 0x00, 0x30, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x18, 0x8c, 0x11, 0x18, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x20, 0x00, 0x63, 0xbe, 0x3d, 0x86, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x10, 0xc0, 0x01, 0x86, 0xb6, 0x4d, 0xe3, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x61, 0x80, 0x02, 0x18, 0xbe, 0x7d, 0x30, 0xc0, 0x01, 0x84, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc6, 0x00, 0x0c, 0x70, 0x5c, 0x3a, 0x0c, 0x20, 0x00, 0xc3, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x9c, 0x00, 0x08, 0xc0, 0x60, 0x06, 0x03, 0x10, 0x00, 0x39, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf0, 0x00, 0x11, 0x80, 0x70, 0x0e, 0x01, 0x98, 0x00, 0x0f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x4f, 0xf6, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x58, 0x14, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x30, 0x1c, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



const int ledPin = 2;
const char* ssid = "***";
const char* password = "***";
IPAddress ip(192,168,77,225); 
IPAddress gateway(192,168,77,1);
IPAddress subnet(255,255,255,0);
IPAddress primaryDNS(8, 8, 8, 8); 
IPAddress secondaryDNS(192,168,77,1); 

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
Adafruit_SHT31 sht31 = Adafruit_SHT31();
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");
GTimer myTimer(MS, 3000);
SemaphoreHandle_t mutex;
boolean start_use=false;
boolean stop_use=false;
float start_t=20;
float stop_t=30;
volatile boolean is_on=false;
struct THD {float t; float h;};
THD thd {0.0, 0.0};

class THData
{
  private:
     float t;
     float h;
     SemaphoreHandle_t mutex;
  public:
     THData(SemaphoreHandle_t m){mutex=m; t=0; h=0;}
     
     void takeTH(THD * thd){
        if( xSemaphoreTake( mutex, ( TickType_t ) 100 ) == pdTRUE ) { 
           thd->t=t; thd->h=h;                       
           xSemaphoreGive(mutex);
        }       
      }

      boolean updateTH(float tn, float hn){
        if (isnan(tn) || isnan(hn)) return false; 
        if( xSemaphoreTake( mutex, ( TickType_t ) 100 ) == pdTRUE ) {   
           t=tn; h=hn;            
           xSemaphoreGive(mutex);
           return true;
        }          
        else return false;
      }
};
THData thdata=NULL;

String processor(const String& var){
  String response;
   if (var == "start_t") {
      response=String(start_t);
      return response;
    };
   if (var == "stop_t") {
      response=String(stop_t);
      return response;
    };
    if (var == "start_use") {
      if (start_use) return String("true");
      else return String("false");
      return response;
    };
   if (var == "stop_use") {
      if (stop_use) return String("true");
      else return String("false");
    };
  return String();
}

void withAuto(THD * thd) {
   if ((start_use) && (thd->t<start_t)) {digitalWrite(ledPin, HIGH);  is_on=true;}
   if ((stop_use) && (thd->t>stop_t))  {digitalWrite(ledPin, LOW); is_on=false;}  
}

void withScreen(float t, float h){
   display.clearDisplay();
   display.setTextSize(2);             
   display.setTextColor(SSD1306_WHITE);
   display.setCursor(0,0);             
   display.println("My spiders"); 
   display.display();
   display.drawLine(0, 18, display.width(), 18, SSD1306_WHITE);
   display.setCursor(0,26);             
   display.setTextSize(1);                
   display.println("Temp: "+String(t)+"C");   
   display.println("Humid: "+String(h)+"%");  
   display.println("");  
   if (is_on) display.println("Heater is On");  
   else display.println("Heater is Off");     
   display.display();    
}


void taskForScreen( void * pvParameters ){
   float t=0.0;
   float h=0.0;   
   const TickType_t xDelay = 3000 / portTICK_PERIOD_MS;

   if(!display.begin(SSD1306_SWITCHCAPVCC)) {Serial.println(F("SSD1306 allocation failed")); return;}
   display.clearDisplay();
   display.drawBitmap(0,0, myBitmap, 128, 64, 1);
   display.display();
   for(;;){
       vTaskDelay(xDelay);
       t=sht31.readTemperature();
       h=sht31.readHumidity();
       if (thdata.updateTH(t,h)) withScreen(t,h);       
   }
}  
  

void setup(){
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);

  if(!SPIFFS.begin(true)){
   Serial.println("An Error has occurred while mounting SPIFFS");
  }  
  
  WiFi.disconnect(true);
  if (!WiFi.config(ip, gateway, subnet, primaryDNS, secondaryDNS)) {
    Serial.println("STA Failed to configure");
  }
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  Serial.println("SHT31 test");
  if (! sht31.begin(0x44)) {  
    Serial.println("Couldn't find SHT31");
  }


  
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/ind.html", String(), false, processor);
  });


  server.on("/on", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(ledPin, HIGH);   
    is_on=true;
    request->send(200, "application/json", "{\"message\":\"On\"}");
  });

  server.on("/off", HTTP_GET, [](AsyncWebServerRequest *request){
    digitalWrite(ledPin, LOW); 
    is_on=false;
    request->send(200, "application/json", "{\"message\":\"Off\"}");    
  });

  server.on("/go_auto", HTTP_GET, [](AsyncWebServerRequest *request){
     if (request->hasParam("start_use")) {      
        AsyncWebParameter* p1 = request->getParam("start_t"); 
        start_t=atof(p1->value().c_str()); 
        start_use=true;
     } else start_use=false;
     if (request->hasParam("stop_use")) {      
        AsyncWebParameter* p2 = request->getParam("stop_t"); 
        stop_t=atof(p2->value().c_str());
        stop_use=true;
     } else stop_use=false;
    request->redirect("/");   
  });

  server.addHandler(&ws);
  server.begin();
  ArduinoOTA.begin();

  mutex = xSemaphoreCreateMutex();
  thdata=THData(mutex);
  xTaskCreatePinnedToCore(taskForScreen, "screen", 2400, NULL, 1, NULL,1);
}
 

void loop(){
  ArduinoOTA.handle();  
  if (myTimer.isReady()) {      
        thdata.takeTH(&thd);
        withAuto(&thd);       
        String temp= String(thd.t)+"+++"+String(thd.h)+"+++";
        if(is_on) temp=temp+"включен"; else temp=temp+"выключен";
        ws.textAll(temp.c_str());     
  }
}
